generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type BikesFaq {
  a String
  q String
}

model Rando {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  randomNum Int
  updatedAt DateTime? @updatedAt @default(now())
  createdAt DateTime? @default(now())
}

enum BikeCategory {
  MTB
  ROAD
  COMMUTER
}
model Bike {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  description   String
  discount      Int
  faq           BikesFaq[]
  image         String
  images        String[]
  name          String
  category      BikeCategory
  originalPrice Int
  price         Int
  rating        Int
  url           String
  updatedAt DateTime? @updatedAt @default(now())
  createdAt DateTime? @default(now())
}

model User {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique
  name  String? @default("user")
  phone String? 
  locality String?
  city    String?
  state   String?
  country String?
  zip     String?
  otp   String?
  isOnboardingComplete Boolean?  @default(false)
  orders Order[]
  updatedAt DateTime? @updatedAt @default(now())
  createdAt DateTime? @default(now())
}

enum DeliveryStatus {
  DELIVERED
  IN_TRANSIT
  UNDELIVERED
  SHIPPED
  CANCELLED
  YET_TO_SHIP
}

enum PaymentStatus {
  PAID
  PENDING
}

model Order {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  ref       String     @default(cuid())
  userId    String     @db.ObjectId
  bikeIds   String[]   @db.ObjectId
  total     Int        @default(0)
  paymentStatus     PaymentStatus
  deliveryStatus    DeliveryStatus
  updatedAt DateTime? @updatedAt @default(now())
  createdAt DateTime? @default(now())
  user User @relation(fields: [userId], references: [id])
}